Prompt for Coding Agent
Project Name:

EtsyBoost – Free Etsy Tag & SEO Generator

Goal:
Create a Next.js web application that allows Etsy sellers to generate relevant tags and receive basic SEO suggestions based on their product listing information. The website will be monetized with display ads (e.g., Google AdSense) and can potentially integrate affiliate links or an optional premium tier later.

1. Project Setup
Initialize a Next.js Project

Use the latest stable Next.js version.
Command: npx create-next-app@latest etsyboost --use-npm --typescript
(Adjust flags/arguments as needed if you prefer JavaScript or different settings.)
Directory Structure

Standard Next.js file/folder layout:
cpp
Copy
Edit
etsyboost/
  ├─ pages/
  │   ├─ index.tsx         // Home Page
  │   └─ api/              // API routes
  ├─ components/
  ├─ public/
  ├─ styles/
  └─ ...
Optionally install UI libraries such as Tailwind CSS or Chakra UI for styling.
Package.json Setup

Ensure dependencies are installed:
"next": "^latest"
"react": "^latest"
"react-dom": "^latest"
Additional packages for styling, forms, or state management as desired.
2. Home Page (Landing Page)
Path: /pages/index.tsx
Purpose: Introduce the tool and capture the user’s attention.
Content Outline:
Header Section:
Project name (EtsyBoost) and a brief tagline (e.g., “Free Etsy Tag & SEO Generator”).
Call-to-Action Button: “Generate My Etsy Tags Now” -> links to the tool page (/tool).
Basic Explanation:
How the tool works.
Why Etsy sellers need better tags.
Potential benefits.
Ad Placement:
Optionally place a display ad block (e.g., Google AdSense script) in the header or sidebar for revenue.
3. Tool Page
Path: /pages/tool.tsx
Purpose: Collect listing details (title, description, category) and generate recommended tags.
Frontend Features:
Form Fields:
title (string)
description (multi-line text)
category (dropdown or text input)
Generate Button
On click, sends data to an API endpoint that processes the info and returns suggested tags.
Display Results:
A list of recommended tags.
Basic SEO recommendations (e.g., “Include these keywords in your title,” “Try these long-tail tags,” etc.).
Styling:
Make it user-friendly, with a clean layout.
Ad Placement:
Place another ad block in a less intrusive spot, perhaps below the tool results.
4. Backend/API Implementation
Path: /pages/api/generateTags.ts (or a similar name)
Purpose: Process the user’s listing info, produce recommended tags + SEO tips.
Implementation Approaches (choose one or combine):

Simple “Keyword Database” Approach
Create a static list or JSON database of popular Etsy-related keywords by category.
When a request is made, parse the title/description, find matching or relevant keywords, and send them back.
AI Approach
Use an LLM (e.g., OpenAI API or a local model) to analyze the user’s text and produce relevant tags.
Note: Requires environment variables for API keys (e.g., in .env.local).
Prompt example:
bash
Copy
Edit
"You are an Etsy SEO assistant. The user has provided the following listing title/description/category:
[User Input].
Suggest 10 relevant keyword tags (single words or short phrases) and 3 SEO tips."
API Endpoint Steps:

Accept POST Data (title, description, category).
Process the input to generate a set of tags.
Return JSON with the recommended tags and optional SEO suggestions.
Example Response:

json
Copy
Edit
{
  "tags": ["handmade jewelry", "silver earrings", "gift for her", "..."],
  "seoTips": [
    "Include 'sterling silver' in your title.",
    "Use bullet points in your description.",
    "Optimize listing with seasonal keywords."
  ]
}
5. Ad Integration
Google AdSense Setup
Add the AdSense script to _document.tsx or in the relevant page components.
Make sure to comply with Google’s policies.
Placeholder Ads
While awaiting AdSense approval, you can insert placeholders or test ads.
Ad Placement Best Practices
Keep user experience top-of-mind. Don’t overwhelm the page with ads.
6. Additional Features & Scalability
Optional Premium Tier
Lock advanced suggestions behind a subscription or one-time payment.
Provide deeper competitor analysis, search volume data, or daily trending keywords.
Database Storage
For user accounts or saving lists of tags, integrate a database (e.g., MongoDB, PostgreSQL).
Analytics & Logging
Track how many times tags are generated.
Use analytics (e.g., Google Analytics) to see user behavior.
7. Deployment
Vercel
Next.js is straightforward to deploy on Vercel.
Connect your Git repository, configure environment variables in Vercel settings if using external APIs.
Other Hosting
Alternatively, use platforms like Netlify or self-hosting on AWS, DigitalOcean, etc.
8. Testing & Launch
Local Testing
Run npm run dev (or yarn dev) and check all pages.
Test the form submission flow and API responses.
Production Build
Run npm run build and npm run start locally to ensure no errors.
SEO Check
Add proper meta tags, ensure robots.txt and sitemap.xml are generated.
Write at least a few blog posts (under /pages/ or using MDX) about Etsy SEO tips to capture organic traffic.
Conclusion & Summary
This Next.js application, EtsyBoost, will:

Attract Etsy sellers wanting quick SEO tag generation.
Monetize via ads or affiliate links.
Scale with premium features and advanced analysis later.
Now, coding agent, please build out the Next.js project according to the specs above. Use clear, maintainable code, and provide any necessary instructions on environment variables or additional packages. Once complete, we’ll have a functioning MVP that can be iterated upon for future enhancements!